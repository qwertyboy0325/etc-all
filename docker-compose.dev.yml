services:
  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: etc_postgres_dev
    environment:
      POSTGRES_DB: etc_pointcloud_dev
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d etc_pointcloud_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: etc_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: etc_minio_dev
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: etc_api_dev
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=etc_pointcloud_dev
      - DB_USER=root
      - DB_PASSWORD=root
      - DATABASE_URL=postgresql+asyncpg://root:root@db:5432/etc_pointcloud_dev
      - SEED_ADMIN=true
      - FIRST_SUPERUSER_EMAIL=${FIRST_SUPERUSER_EMAIL:-admin@etc.com}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:-admin123}
      - FIRST_SUPERUSER_NAME=${FIRST_SUPERUSER_NAME:-Admin}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=pointcloud-files
      - MINIO_SECURE=false
      - DEBUG=True
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - /app/.pytest_cache
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: etc_celery_worker_dev
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=etc_pointcloud_dev
      - DB_USER=root
      - DB_PASSWORD=root
      - SEED_ADMIN=true
      - FIRST_SUPERUSER_EMAIL=${FIRST_SUPERUSER_EMAIL:-admin@etc.com}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:-admin123}
      - FIRST_SUPERUSER_NAME=${FIRST_SUPERUSER_NAME:-Admin}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=pointcloud-files
      - MINIO_SECURE=false
      - DEBUG=True
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - app_network
    depends_on:
      - db
      - redis
      - minio
    restart: unless-stopped

  # Celery Flower (Optional - for monitoring)
  celery_flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: etc_celery_flower_dev
    command: celery -A app.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    networks:
      - app_network
    depends_on:
      - redis
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: etc_frontend_dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_APP_NAME=ETC Point Cloud Annotation System
      - VITE_VERSION=1.0.0
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    networks:
      - app_network
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: etc_nginx_dev
    ports:
      - "80:80"
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf
    networks:
      - app_network
    depends_on:
      - frontend
      - api
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  app_network:
    driver: bridge 
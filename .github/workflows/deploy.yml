name: Deploy to GCP

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: etc-pointcloud-cluster
  GKE_ZONE: asia-east1-a
  DEPLOYMENT_NAME: etc-pointcloud

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Build and push images
      run: |
        # Build backend
        docker build -t gcr.io/$PROJECT_ID/etc-backend:$GITHUB_SHA ./backend
        docker push gcr.io/$PROJECT_ID/etc-backend:$GITHUB_SHA
        
        # Build frontend
        docker build -t gcr.io/$PROJECT_ID/etc-frontend:$GITHUB_SHA ./frontend
        docker push gcr.io/$PROJECT_ID/etc-frontend:$GITHUB_SHA
        
        # Tag as latest
        docker tag gcr.io/$PROJECT_ID/etc-backend:$GITHUB_SHA gcr.io/$PROJECT_ID/etc-backend:latest
        docker tag gcr.io/$PROJECT_ID/etc-frontend:$GITHUB_SHA gcr.io/$PROJECT_ID/etc-frontend:latest
        
        # Push latest tags
        docker push gcr.io/$PROJECT_ID/etc-backend:latest
        docker push gcr.io/$PROJECT_ID/etc-frontend:latest
    
    - name: Deploy to GKE
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
        
        # Update image tags in Kubernetes manifests
        sed -i "s/gcr.io\/YOUR_PROJECT_ID/gcr.io\/$PROJECT_ID/g" k8s/backend.yaml
        sed -i "s/gcr.io\/YOUR_PROJECT_ID/gcr.io\/$PROJECT_ID/g" k8s/frontend.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/minio.yaml
        kubectl apply -f k8s/backend.yaml
        kubectl apply -f k8s/frontend.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/backend -n etc-pointcloud
        kubectl rollout status deployment/frontend -n etc-pointcloud
        kubectl rollout status deployment/celery-worker -n etc-pointcloud
    
    - name: Verify deployment
      run: |
        kubectl get pods -n etc-pointcloud
        kubectl get services -n etc-pointcloud
        kubectl get ingress -n etc-pointcloud